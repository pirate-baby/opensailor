# Generated by Django 5.2.1 on 2025-09-07 18:47

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("webapp", "0019_alter_vessel_hull_identification_number"),
    ]

    operations = [
        migrations.CreateModel(
            name="LogEntry",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        blank=True,
                        help_text="Optional short title for the log entry",
                        max_length=200,
                    ),
                ),
                (
                    "content",
                    models.TextField(help_text="Log entry content in markdown format"),
                ),
                (
                    "log_timestamp",
                    models.DateTimeField(
                        help_text="When this log event occurred (not when it was recorded)"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "author",
                    models.ForeignKey(
                        help_text="The user who created this log entry",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="log_entries",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "vessel",
                    models.ForeignKey(
                        help_text="The vessel this log entry belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="log_entries",
                        to="webapp.vessel",
                    ),
                ),
            ],
            options={
                "verbose_name": "Log Entry",
                "verbose_name_plural": "Log Entries",
                "ordering": ["-log_timestamp"],
            },
        ),
        migrations.CreateModel(
            name="LogEntryAttachment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "attachment_type",
                    models.CharField(
                        choices=[
                            ("image", "Image"),
                            ("receipt", "Receipt"),
                            ("manual", "Manual"),
                            ("document", "Document"),
                            ("video", "Video"),
                            ("audio", "Audio"),
                            ("other", "Other"),
                        ],
                        help_text="Type of attachment",
                        max_length=20,
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        blank=True,
                        help_text="Optional description of the attachment",
                        max_length=500,
                    ),
                ),
                (
                    "order",
                    models.PositiveIntegerField(
                        default=0, help_text="Display order of attachments"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "log_entry",
                    models.ForeignKey(
                        help_text="The log entry this attachment belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="attachments",
                        to="webapp.logentry",
                    ),
                ),
                (
                    "media",
                    models.ForeignKey(
                        help_text="The media file for this attachment",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="webapp.media",
                    ),
                ),
            ],
            options={
                "verbose_name": "Log Entry Attachment",
                "verbose_name_plural": "Log Entry Attachments",
                "ordering": ["order", "created_at"],
            },
        ),
        migrations.CreateModel(
            name="LogEntryLocation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True,
                        help_text="Optional name for this location",
                        max_length=200,
                    ),
                ),
                (
                    "latitude",
                    models.DecimalField(
                        decimal_places=7,
                        help_text="Latitude in decimal degrees",
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(-90),
                            django.core.validators.MaxValueValidator(90),
                        ],
                    ),
                ),
                (
                    "longitude",
                    models.DecimalField(
                        decimal_places=7,
                        help_text="Longitude in decimal degrees",
                        max_digits=11,
                        validators=[
                            django.core.validators.MinValueValidator(-180),
                            django.core.validators.MaxValueValidator(180),
                        ],
                    ),
                ),
                (
                    "location_type",
                    models.CharField(
                        choices=[
                            ("waypoint", "Waypoint"),
                            ("start", "Start Point"),
                            ("end", "End Point"),
                            ("anchorage", "Anchorage"),
                            ("marina", "Marina"),
                            ("fuel", "Fuel Stop"),
                            ("emergency", "Emergency"),
                            ("other", "Other"),
                        ],
                        default="waypoint",
                        help_text="Type of location",
                        max_length=20,
                    ),
                ),
                (
                    "order",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Order of this location in the route (0-based)",
                    ),
                ),
                (
                    "speed_knots",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Speed in knots at this location",
                        max_digits=5,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "heading_degrees",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Compass heading in degrees (0-359)",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(359),
                        ],
                    ),
                ),
                (
                    "depth_feet",
                    models.DecimalField(
                        blank=True,
                        decimal_places=1,
                        help_text="Water depth in feet",
                        max_digits=6,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "wind_speed_knots",
                    models.DecimalField(
                        blank=True,
                        decimal_places=1,
                        help_text="Wind speed in knots",
                        max_digits=4,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "wind_direction_degrees",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Wind direction in degrees (0-359)",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(359),
                        ],
                    ),
                ),
                (
                    "temperature_f",
                    models.IntegerField(
                        blank=True, help_text="Temperature in Fahrenheit", null=True
                    ),
                ),
                (
                    "barometric_pressure",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Barometric pressure in inches of mercury",
                        max_digits=5,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(25),
                            django.core.validators.MaxValueValidator(35),
                        ],
                    ),
                ),
                (
                    "sea_state",
                    models.CharField(
                        blank=True,
                        help_text="Description of sea conditions",
                        max_length=100,
                    ),
                ),
                (
                    "visibility_miles",
                    models.DecimalField(
                        blank=True,
                        decimal_places=1,
                        help_text="Visibility in nautical miles",
                        max_digits=4,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "timestamp",
                    models.DateTimeField(
                        blank=True,
                        help_text="Timestamp when location was recorded",
                        null=True,
                    ),
                ),
                (
                    "log_entry",
                    models.ForeignKey(
                        help_text="The log entry this location belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="locations",
                        to="webapp.logentry",
                    ),
                ),
            ],
            options={
                "verbose_name": "Log Entry Location",
                "verbose_name_plural": "Log Entry Locations",
                "ordering": ["order", "timestamp"],
            },
        ),
        migrations.AddIndex(
            model_name="logentry",
            index=models.Index(
                fields=["vessel", "-log_timestamp"],
                name="webapp_loge_vessel__917145_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="logentry",
            index=models.Index(
                fields=["author", "-log_timestamp"],
                name="webapp_loge_author__2fdcef_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="logentryattachment",
            index=models.Index(
                fields=["log_entry", "order"], name="webapp_loge_log_ent_003501_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="logentryattachment",
            index=models.Index(
                fields=["attachment_type"], name="webapp_loge_attachm_1c00a2_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="logentrylocation",
            index=models.Index(
                fields=["log_entry", "order"], name="webapp_loge_log_ent_d8d6da_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="logentrylocation",
            index=models.Index(
                fields=["latitude", "longitude"], name="webapp_loge_latitud_7260e6_idx"
            ),
        ),
    ]
