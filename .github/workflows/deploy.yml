name: Deploy to Amazon ECS

on:
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy (e.g. v1.2.3)'
        required: true
        type: string

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-2
  ECR_REPOSITORY: opensailor-app
  ECS_SERVICE: arn:aws:ecs:us-east-2:227647310737:service/opensailor-cluster/opensailor-service
  ECS_CLUSTER: arn:aws:ecs:us-east-2:227647310737:cluster/opensailor-cluster
  ECS_TASK_DEFINITION: arn:aws:ecs:us-east-2:227647310737:task-definition/opensailor-task
  CONTAINER_NAME: app

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set image tag
        id: set-image-tag
        run: |
          if [[ "${{ github.event_name }}" == "release" ]]; then
            echo "IMAGE_TAG=${{ github.ref_name }}" >> $GITHUB_ENV
          else
            echo "IMAGE_TAG=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          fi

      - name: Set up OpenTofu
        uses: opentofu/setup-opentofu@v1
        with:
          tofu-version: 'latest'

      - name: Export ECS task definition from OpenTofu
        run: |
          chmod +x opentofu/export-ecs-task-def.sh
          ./opentofu/export-ecs-task-def.sh

      - name: Show exported ECS task definition
        run: cat opentofu/ecs-task-def.json

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::227647310737:role/opensailor-github-actions-deploy
          aws-region: us-east-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG . --build-arg ENVIRONMENT=production -f dockerfiles/app.Dockerfile
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: opentofu/ecs-task-def.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true