name: Deploy to Amazon ECS

on:
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy (e.g. v1.2.3)'
        required: true
        type: string

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  ECR_REPOSITORY: opensailor-app
  ECS_SERVICE: arn:aws:ecs:${{ vars.AWS_REGION }}:${{ vars.AWS_ACCOUNT_ID }}:service/opensailor-cluster/opensailor-service
  ECS_CLUSTER: arn:aws:ecs:${{ vars.AWS_REGION }}:${{ vars.AWS_ACCOUNT_ID }}:cluster/opensailor-cluster
  ECS_TASK_DEFINITION: arn:aws:ecs:${{ vars.AWS_REGION }}:${{ vars.AWS_ACCOUNT_ID }}:task-definition/opensailor-task
  CONTAINER_NAME: app

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set image tag
        id: set-image-tag
        run: |
          if [[ "${{ github.event_name }}" == "release" ]]; then
            echo "IMAGE_TAG=${{ github.ref_name }}" >> $GITHUB_ENV
          else
            echo "IMAGE_TAG=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/opensailor-github-actions-deploy
          aws-region: ${{ vars.AWS_REGION }}

      - name: Cache OpenTofu
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/opentofu
            opentofu/.terraform
            opentofu/.terraform.lock.hcl
          key: opentofu-${{ hashFiles('opentofu/**/*.tf', 'opentofu/.terraform.lock.hcl') }}
          restore-keys: |
            opentofu-

      - name: Set up OpenTofu
        uses: opentofu/setup-opentofu@v1
        with:
          tofu_version: '1.9.1'

      - name: Export ECS task definition from OpenTofu
        run: |
          chmod +x opentofu/export-ecs-task-def.sh
          ./opentofu/export-ecs-task-def.sh

      - name: Show exported ECS task definition
        run: cat opentofu/ecs-task-def.json

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build CSS assets
        run: |
          cd app
          curl -sLO https://github.com/tailwindlabs/tailwindcss/releases/latest/download/tailwindcss-linux-x64
          chmod +x tailwindcss-linux-x64
          ./tailwindcss-linux-x64 -i input.css -o ../static/output.css

      - name: Build frontend assets  
        run: |
          mkdir -p static/libraries
          cd client_side_js
          npm install vite @milkdown/crepe
          npx vite build
          cp -r dist/* ../static/libraries/

      - name: Verify static files exist
        run: |
          if [ ! -f "static/output.css" ]; then
            echo "Error: static/output.css not found after build"
            exit 1
          fi
          if [ ! -f "static/libraries/main.js" ]; then
            echo "Error: static/libraries/main.js not found after build"
            exit 1
          fi
          echo "Static files verified:"
          ls -la static/output.css static/libraries/main.js

      - name: Collect and upload all static files to S3
        run: |
          docker run --rm \
            -v $(pwd):/workspace \
            -w /workspace \
            -e DJANGO_SECRET_KEY="${{ secrets.DJANGO_SECRET_KEY }}" \
            -e AWS_ACCESS_KEY_ID \
            -e AWS_SECRET_ACCESS_KEY \
            -e AWS_SESSION_TOKEN \
            -e AWS_S3_STORAGE_BUCKET=static-opensailor-org \
            -e AWS_DEFAULT_REGION_NAME="${{ vars.AWS_REGION }}" \
            -e AWS_S3_ENDPOINT_URL="https://s3.${{ vars.AWS_REGION }}.amazonaws.com" \
            -e AWS_S3_CLIENT_ENDPOINT_URL="https://static.opensailor.org" \
            python:3.12-slim \
            bash -c "
              pip install --upgrade pip > /dev/null 2>&1 && 
              pip install uv > /dev/null 2>&1 && 
              cd app && 
              uv sync && 
              uv run python manage.py collectstatic --noinput --settings=collectstatic_settings
            "

      - name: Build and push image to Amazon ECR
        id: build-image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: dockerfiles/app.Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest
          build-args: |
            ENVIRONMENT=production
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false
          sbom: false

      - name: Export image URI for ECS
        id: export-image
        run: echo "image=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: opentofu/ecs-task-def.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.export-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true