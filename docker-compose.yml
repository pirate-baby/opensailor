services:
  app: &app
    image: opensailor-app
    build:
      context: .
      dockerfile: dockerfiles/app.Dockerfile
      args:
        - ENVIRONMENT=development
    ports:
      - "8000:8000"
    volumes:
      - .:/src
    environment:
      - DEBUG=1
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - APP_DB_PASSWORD=${APP_DB_PASSWORD}
      - APP_DB_USER=${APP_DB_USER}
      - APP_DB=${APP_DB}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - GITHUB_CLIENT_ID=${GITHUB_CLIENT_ID}
      - GITHUB_CLIENT_SECRET=${GITHUB_CLIENT_SECRET}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_S3_ENDPOINT_URL=${AWS_S3_ENDPOINT_URL}
      - AWS_S3_CLIENT_ENDPOINT_URL=http://minio.localhost
      - AWS_DEFAULT_REGION_NAME=${AWS_DEFAULT_REGION_NAME}
      - AWS_S3_STORAGE_BUCKET=${AWS_S3_STORAGE_BUCKET}

      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - EMAIL_HOST=${EMAIL_HOST}
    depends_on:
      database_startup:
        condition: service_completed_successfully
      database:
        condition: service_healthy
      minio:
        condition: service_healthy
  test:
    <<: *app
    profiles:
      - test
    entrypoint: ["uv", "run", "pytest", "/src/tests","--it"]
    ports: []
  format:
    <<: *app
    profiles:
      - utils
    entrypoint: ["uv", "run", "black", "/src/app/webapp"]
    ports: []
    depends_on: []
  lint:
    <<: *app
    profiles:
      - utils
    entrypoint: ["uv", "run", "prospector", "--profile", ".prospector.yaml"]
    ports: []
    depends_on: []
  makemigrations:
    <<: *app
    profiles:
      - utils
    entrypoint: ["uv", "run", "python", "/src/app/manage.py", "makemigrations"]
    depends_on:
      database:
        condition: service_healthy
    ports: []
  migrate:
    <<: *app
    profiles:
      - utils
    entrypoint: ["uv", "run", "python", "/src/app/manage.py", "migrate"]
    depends_on:
      database:
        condition: service_healthy
    ports: []

  database_startup:
    build:
      context: .
      dockerfile: dockerfiles/db_startup.Dockerfile
      args:
        - ENVIRONMENT=development
    environment:
      - APP_DB_PASSWORD=${APP_DB_PASSWORD}
      - APP_DB_USER=${APP_DB_USER}
      - APP_DB=${APP_DB}
      - LANGFUSE_DB_PASSWORD=${LANGFUSE_DB_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_HOST=${POSTGRES_HOST}
    depends_on:
      database:
        condition: service_healthy

  database:
    image: postgres:16
    volumes:
      - ./.data/postgres:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - APP_DB_PASSWORD=${APP_DB_PASSWORD}
      - LANGFUSE_DB_PASSWORD=${LANGFUSE_DB_PASSWORD}
      - ENVIRONMENT=${ENVIRONMENT}
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres", "-d", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  nginx:
    image: app_nginx
    build:
      context: .
      dockerfile: dockerfiles/nginx.Dockerfile
    ports:
      - "80:80"
    depends_on:
      - app
      - database
      - minio

  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=${AWS_ACCESS_KEY_ID}
      - MINIO_REGION_NAME=${AWS_DEFAULT_REGION_NAME}
      - MINIO_ROOT_PASSWORD=${AWS_SECRET_ACCESS_KEY}
    volumes:
      - .data/minio:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  minio_setup:
    image: minio/mc:latest
    depends_on:
      minio:
        condition: service_healthy
    environment:
      - MINIO_ROOT_USER=${AWS_ACCESS_KEY_ID}
      - MINIO_ROOT_PASSWORD=${AWS_SECRET_ACCESS_KEY}
    entrypoint: >
      /bin/sh -c "
      mc alias set myminio http://minio:9000 $$MINIO_ROOT_USER $$MINIO_ROOT_PASSWORD &&
      mc mb myminio/static-opensailor-org --ignore-existing &&
      mc anonymous set download myminio/static-opensailor-org
      "

  opentofu:
    image: ghcr.io/opentofu/opentofu:1.9.1
    profiles:
      - deploy
    working_dir: /infra
    volumes:
      - ./opentofu:/infra
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=us-east-2
      - AWS_SESSION_TOKEN=${AWS_SESSION_TOKEN}
      - TF_VAR_cloudflare_api_key=${TF_VAR_cloudflare_api_key}
      - TF_VAR_cloudflare_account_id=${TF_VAR_cloudflare_account_id}
    entrypoint: ["/bin/sh"]
    tty: true

  frontend:
    image: node:20
    working_dir: /client_side_js
    volumes:
      - ./client_side_js:/client_side_js
      - ./static/libraries:/client_side_js/dist
    command: sh -c "npm install vite @milkdown/crepe && npx vite build"
    profiles:
      - build

  css:
    image: node:20
    working_dir: /app
    volumes:
      - ./app:/app
      - ./static:/static
    command: sh -c "npm install && npx tailwindcss -i input.css -o /static/output.css"
    profiles:
      - build